package com.podStream.PodStream.Models;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.time.LocalDateTime;

/**
 * La entidad Answers representa una respuesta a un comentario en la plataforma.
 * Almacena la respuesta hecha por un usuario a un comentario específico.
 *
 * Ejemplo de uso:
 * Answers answer = new Answers(1L, "Esta es una respuesta", "user123", comment, person, LocalDateTime.now(), true);
 */
@Entity
public class Answers {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
    @GenericGenerator(name = "native", strategy = "native")
    private long id;

    /**
     * Cuerpo de la respuesta.
     */
    @Column(length = 10000)
    private String body;

    /**
     * Nombre de usuario que realizó la respuesta.
     */
    private String userName;

    /**
     * Relación con el comentario original.
     */
    @ManyToOne(fetch = FetchType.EAGER)
    private Comment comment;

    /**
     * Persona que realizó la respuesta.
     */
    @ManyToOne(fetch = FetchType.EAGER)
    private Person person;

    /**
     * Fecha y hora de la respuesta.
     */
    private LocalDateTime date;

    /**
     * Indica si la respuesta está activa o no.
     */
    private boolean active;

    /**
     * Constructor vacío necesario para JPA.
     */
    public Answers() {
    }

    /**
     * Constructor para crear una respuesta con información completa.
     *
     * @param id ID de la respuesta.
     * @param body Contenido de la respuesta.
     * @param userName Nombre de usuario que hizo la respuesta.
     * @param comment Comentario original asociado a la respuesta.
     * @param person Persona que realizó la respuesta.
     * @param date Fecha y hora en que se realizó la respuesta.
     * @param active Indica si la respuesta está activa.
     */
    public Answers(long id, String body, String userName, Comment comment, Person person, LocalDateTime date, boolean active) {
        this.id = id;
        this.body = body;
        this.userName = userName;
        this.comment = comment;
        this.person = person;
        this.date = date;
        this.active = active;
    }

    // Getters y Setters con Javadoc

    /**
     * Obtiene el ID de la respuesta.
     *
     * @return ID de la respuesta.
     */
    public long getId() {
        return id;
    }

    /**
     * Establece el ID de la respuesta.
     *
     * @param id ID de la respuesta.
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Obtiene el cuerpo de la respuesta.
     *
     * @return Contenido de la respuesta.
     */
    public String getBody() {
        return body;
    }

    /**
     * Establece el cuerpo de la respuesta.
     *
     * @param body Contenido de la respuesta.
     */
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Obtiene el nombre del usuario que hizo la respuesta.
     *
     * @return Nombre de usuario.
     */
    public String getUserName() {
        return userName;
    }

    /**
     * Establece el nombre del usuario que hizo la respuesta.
     *
     * @param userName Nombre de usuario.
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    /**
     * Obtiene el comentario asociado a la respuesta.
     *
     * @return Comentario asociado.
     */
    public Comment getComment() {
        return comment;
    }

    /**
     * Establece el comentario asociado a la respuesta.
     *
     * @param comment Comentario asociado.
     */
    public void setComment(Comment comment) {
        this.comment = comment;
    }

    /**
     * Obtiene la persona que realizó la respuesta.
     *
     * @return Persona que hizo la respuesta.
     */
    public Person getPerson() {
        return person;
    }

    /**
     * Establece la persona que realizó la respuesta.
     *
     * @param person Persona que hizo la respuesta.
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * Obtiene la fecha y hora en que se hizo la respuesta.
     *
     * @return Fecha y hora de la respuesta.
     */
    public LocalDateTime getDate() {
        return date;
    }

    /**
     * Establece la fecha y hora en que se hizo la respuesta.
     *
     * @param date Fecha y hora de la respuesta.
     */
    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    /**
     * Verifica si la respuesta está activa.
     *
     * @return Estado de la respuesta (activa/inactiva).
     */
    public boolean isActive() {
        return active;
    }

    /**
     * Establece si la respuesta está activa.
     *
     * @param active Estado de la respuesta (activa/inactiva).
     */
    public void setActive(boolean active) {
        this.active = active;
    }
}
